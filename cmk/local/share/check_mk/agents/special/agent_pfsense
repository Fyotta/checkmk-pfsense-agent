#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# Checkmk special agent for pfSense - Fyotta (https://github.com/Fyotta/checkmk-pfsense-agent)
# This code is distributed under the terms of the GNU General Public License, version 3 (GPLv3).
# See the LICENSE file for details on the license terms.
"""Checkmk special agent for pfSense"""

import argparse
import http.client
from typing import Any
import requests
import sys
import base64
import json

class HTTPErrorWithStatusCode(Exception):
    pass

class AuthenticationError(Exception):
    pass

class PfsenseApi:
    def __init__(self, address: str, user: str, password: str, port: int = None, timeout: int = 5, protocol: str = 'https', ignore_ssl_errors: bool = False) -> None:
        self._address = address
        self._user = user
        self._password = password
        self._port = port
        self._timeout = timeout
        self._protocol = protocol
        self._ignore_ssl_errors = ignore_ssl_errors if self._protocol == 'https' else True
        self._uri = f"{self._protocol}://{self._address}"
        if self._port:
            self._uri += f":{self._port}"
        self._session = requests.Session()
        hash = base64.b64encode(f"{self._user}:{self._password}".encode())
        self._session.headers.update(
            {
                "Content-Type": "application/json; charset=UTF-8",
                "Authorization": f"Basic {hash.decode('ascii')}"
            }
        )

    def _check_response(self, res: requests.Response) -> None:
        if res.status_code != 200:
            status_msg = http.client.responses.get(res.status_code, 'Unknown Status')
            if res.status_code == 401:
                raise AuthenticationError(f"HTTP Error: ({res.status_code}) {status_msg}")
            raise HTTPErrorWithStatusCode(f"HTTP Error: ({res.status_code}) {status_msg}")

    def get_ipsec_status(self) -> Any:
        url = f"{self._uri}/cmk/v1/ipsec_status.php"
        res = self._session.get(url, verify=(not self._ignore_ssl_errors), timeout=self._timeout)
        self._check_response(res)
        api_data = res.json()

        p1_list = []

        for item in api_data:
            p1 = {}
            p1['description'] = item['description']
            if item['state']['state'] == 'ESTABLISHED':
                p1['state'] = 'connected'
                p1['ph2_connected'] = item['state']['p2_connected']
                p1['ph2'] = []
                if item['state']['p2_connected'] > 0:
                    for p2_item in item['p2']:
                        p1['ph2'].append({
                            "description": p2_item['description'],
                            'state': p2_item['state'],
                            "stats": p2_item['stats']
                        })
            else:
                p1['state'] = 'disconnected'
                p1['ph2_connected'] = 0
                p1['ph2'] = []

            p1_list.append(p1)

        return p1_list

def check_port(value):
    min_port = 1
    max_port = 65535
    ivalue = int(value)
    if ivalue < min_port or ivalue > max_port:
        raise argparse.ArgumentTypeError(f"{value} is an invalid port number. Must be between {min_port} and {max_port}.")
    return ivalue

def parse_arguments(argv):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--user", type=str, required=True)
    parser.add_argument("--secret", type=str, required=True)
    parser.add_argument("--port", type=check_port, help="Port number (1-65535)")
    parser.add_argument("--timeout", type=int, default=5)
    parser.add_argument("--protocol", type=str, default='https', choices=['http', 'https'])
    parser.add_argument("--ignore-ssl-errors", action='store_true', dest='ignore_ssl_errors')
    parser.add_argument("host_address", metavar="HOST")
    return parser.parse_args(argv)

def main(sys_argv=None):
    if sys_argv is None:
        sys_argv = sys.argv[1:]
    args = parse_arguments(sys_argv)

    pfSense_api = PfsenseApi(args.host_address, args.user, args.secret, args.port, args.timeout, args.protocol, args.ignore_ssl_errors)
    status = pfSense_api.get_ipsec_status()
    sys.stdout.write("<<<pfsense_ipsec>>>\n")
    if status:
        sys.stdout.write(f"{json.dumps(status)}\n")

if __name__ == "__main__":
    main()
